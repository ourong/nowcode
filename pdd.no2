import sys
N = int(sys.stdin.readline().strip()) # num of dices
dice_list = []
for _ in range(N):
    dice_list.append(map(int, sys.stdin.readline().strip().split(" "))) # input all of dices

# with open('input1.txt', 'r') as f:
#     N = int(f.readline().strip())
#     dice_list = []
#     for idx in range(N):
#         dice_list.append(list(map(int, f.readline().strip().split(" "))))

def filp_dice(adice, type):
    new_dice = [0 for _ in range(6)]
    change_index = range(6)
    if type == 0: # up to ahead
        change_index = [5, 4, 2, 3, 0, 1]
    if type == 1: # ahead to right
        change_index = [0, 1, 5, 4, 2, 3]
    if type == 2: # up to right
        change_index = [2, 3, 1, 0, 4, 5]

    for idx in range(6):
        new_dice[idx] = adice[change_index[idx]]
    return new_dice


def to_the_ahead(adice, index_min):
    tadice = adice[:]
    if index_min == 1:
        for _ in range(3):
            tadice = filp_dice(tadice, 0)
    if index_min == 2:
        for _ in range(1):
            tadice = filp_dice(tadice, 1)
    if index_min == 3:
        for _ in range(3):
            tadice = filp_dice(tadice, 1)
    if index_min == 4:
        tadice = tadice
    if index_min == 5:
        for _ in range(2):
            tadice = filp_dice(tadice, 0)
    if index_min == 0:
        tadice = filp_dice(tadice, 0)
    return tadice


def to_top(adice, index_min):
    tadice = adice[:]
    if index_min == 0:
        tadice = tadice
    if index_min == 1:
        for _ in range(2):
            tadice = filp_dice(tadice, 2)
    if index_min == 2:
        for _ in range(1):
            tadice = filp_dice(tadice, 2)
    if index_min == 3:
        for _ in range(3):
            tadice = filp_dice(tadice, 2)
    return tadice


# change_all_the dice into the small least into the ahead and the
sorted_dice_list = [[] for _ in range(N)]
final_sorted_dice_list = [[] for _ in range(N)]
for idx, _dice in enumerate(dice_list):
    num_min = min(_dice)
    index_min = []
    for jdx, _num in enumerate(_dice):
        if _num == num_min:
            index_min.append(jdx)
    # index_min = _dice.index(num_min)
    for i_index in index_min:
        sorted_dice_list[idx].append(to_the_ahead(dice_list[idx], i_index))

    for sorted_dice in sorted_dice_list[idx]:
        _temp = sorted_dice[0:4]
        num_min = min(_temp)
        index_min = []
        for jdx, _num in enumerate(_temp):
            if _num == num_min:
                index_min.append(jdx)

        for i_index in index_min:
            final_sorted_dice_list[idx].append(to_top(sorted_dice, i_index))

# print(dice_list)
flag = [1 for _ in range(N)]
for idx in range(N-1):
    if flag[idx] == -1:
        continue
    for jdx in range(idx+1, N):
        if flag[jdx] == -1:
            continue
        allp = False
        for hdx in range(len(final_sorted_dice_list[idx])):
            if allp:
                continue
            for qdx in range(len(final_sorted_dice_list[jdx])):
                if allp:
                    continue
                p = True
                for kdx in range(6):
                    if final_sorted_dice_list[idx][hdx][kdx] != final_sorted_dice_list[jdx][qdx][kdx]:
                        p = False
                if p:
                    flag[jdx] = -1
                    flag[idx] += 1
                    allp = True

output_num = 0
output_list = []
for idx in range(N):
    if flag[idx] != -1:
        output_num += 1
        output_list.append(flag[idx])

print(output_num) # the num

output_list.sort(reverse=True) # sorted from big to small

print(' '.join(list(map(str, output_list))))